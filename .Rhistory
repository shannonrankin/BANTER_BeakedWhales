quarto use template quarto-journals/elsevier
quarto use template quarto-journals/elsevier
quarto use template quarto-journals/elsevier
quarto use template quarto-journals/elsevier
library(RSQLite)
# comparing pascal databases
library(dplyr)
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks')]
})
bind_rows(evList)
}
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
evTable$db <- basename(x)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
srEv <- dbToEventList('pascal/databases/')
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
if(nrow(evTable) == 0) retur(NULL)
evTable$db <- basename(x)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
srEv <- dbToEventList('pascal/databases/')
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
if(nrow(evTable) == 0) return(NULL)
evTable$db <- basename(x)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
srEv <- dbToEventList('pascal/databases/')
str(srEv)
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
if(nrow(evTable) == 0) return(NULL)
evTable$db <- basename(x)
evTable$comment <- gsub(' ', '', evTable$comment)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
srEv <- dbToEventList('pascal/databases/')
str(srEv)
dbToEventList <- function(dbDir) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
if(nrow(evTable) == 0) return(NULL)
evTable$db <- basename(x)
evTable$comment <- gsub(' ', '', evTable$comment)
evTable$eventType <- gsub(' ', '', evTable$eventType)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
srEv <- dbToEventList('pascal/databases/')
str(srEv)
driftFolders <- list.dirs('D:/PASCAL_2016/Binaries&DBs by Drift ReRun w 2_00_16e/', recursive = FALSE, full.names = TRUE)
allDb <- unlist(sapply(driftFolders, function(x) {
dirs <- list.dirs(x, recursive = FALSE, full.names = TRUE)
if(any(grepl('Binaries wUID', dirs))) {
db <- list.files(x, pattern='GPS.sqlite3', full.names=TRUE)
if(length(db) == 0) {
cat('\nNo db found in folder', x)
}
return(db)
}
sapply(dirs, function(y) {
db <- list.files(y, pattern='GPS.sqlite3', full.names=TRUE)
if(length(db) == 0) {
cat('\nNo db foundin folderY', y)
}
db
})
})) %>% unname()
allDb
basename(allDb)
srDb <- list.files('pascal/databases/', pattern='sqlite3$', full.names=TRUE)
srDb
basename(srDb) %in% basename(allDb)
basename(srDb)
basename(allDb)
grepl('_wGPS', basename(allDb))
gsub('_wGPS', '', basename(allDb)) %in% basename(srDb)
basename(srDb) %in% gsub('_wGPS', '', basename(allDb))
gsub('_wGPS', '', basename(allDb)) %in% basename(srDb)
srMissing <- gsub('_wGPS', '', basename(allDb)) %in% basename(srDb)
basename(allDb)[srMissing]
srMissing
srMissing <- 1gsub('_wGPS', '', basename(allDb)) %in% basename(srDb)
srMissing <- !gsub('_wGPS', '', basename(allDb)) %in% basename(srDb)
basename(allDb)[srMissing]
dbToEventList <- function(dbDir) {
if(length(dbDir) == 1) {
files <- list.files(dbDir, pattern='sqlite3$', full.names=TRUE)
} else {
files <- dbDir
}
evList <- lapply(files, function(x) {
con <- dbConnect(x, drv=SQLite())
evTable <- dbReadTable(con, 'Click_Detector_OfflineEvents')
if(nrow(evTable) == 0) return(NULL)
evTable$db <- basename(x)
evTable$comment <- gsub(' ', '', evTable$comment)
evTable$eventType <- gsub(' ', '', evTable$eventType)
evTable[c('eventType', 'UTC', 'Id', 'comment', 'nClicks', 'db')]
})
bind_rows(evList)
}
tsEv <- dbToEventList(allDb)
nrow(tsEv)
nrow(srEv)
length(unique(tsEv$db))
dbDisconnect(con)
table(tsEv$db)
srMissing
tsEv$db[1]
tsMatch <- tsEv[!tsEv$db %in% basename(allDb)[srMissing], ]
nrow(tsMatch)
nrow(srEv)
head(srEv)
head(tsMatch)
sum(tsMatch$nClicks)
sum(srEv$nClicks)
identical(tsMatch$eventType, srEv$eventType)
identical(tsMatch$Id, srEv$Id)
identical(tsMatch$nClicks, srEv$nClicks)
sum(tsMatch$nClicks) == sum(srEv$nClicks)
install.packages('banter')
